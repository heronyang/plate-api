#!/usr/bin/env python

import sys
import os
import subprocess
import tempfile

from django.conf import settings

def mysql_drop_database(db):
    db_passsword = db['PASSWORD']
    db_database_name = db['NAME']

    tfi = tempfile.TemporaryFile()
    tfo = tempfile.TemporaryFile(mode='r+')
    tfi.write('DROP DATABASE %s;' % (db_database_name,))
    tfi.seek(0)
    r = subprocess.call(['mysql', '-u', 'root', '-p'+db_passsword], stdin=tfi, stdout=tfo, stderr=tfo)
    if r != 0:
        sys.stderr.write('mysql error:\n')
        tfo.seek(0)
        sys.stderr.write(tfo.read())

def mysql_create_database(db):
    db_passsword = db['PASSWORD']
    db_database_name = db['NAME']

    tfi = tempfile.TemporaryFile()
    tfo = tempfile.TemporaryFile(mode='r+')
    tfi.write('CREATE DATABASE %s character set utf8;' % (db_database_name,))
    tfi.seek(0)
    r = subprocess.call(['mysql', '-u', 'root', '-p'+db_passsword], stdin=tfi, stdout=tfo, stderr=tfo)
    if r != 0:
        sys.stderr.write('mysql error:\n')
        tfo.seek(0)
        sys.stderr.write(tfo.read())

def sqlite3_drop_database(db):
    sqlite_file = db['NAME']
    os.unlink(sqlite_file)

main_function_map = {}

def main_function(func):
    global main_function_map
    main_function_map[func.__name__.replace('_','-')] = func

@main_function
def django_db_destroy(args):
    db = settings.DATABASES['default']
    dbe = db['ENGINE']
    if dbe.endswith('.mysql'):
        mysql_drop_database(db)
    elif dbe.endswith('.sqlite3'):
        sqlite3_drop_database(db)
    else:
        assert(0)

@main_function
def django_db_create(args):
    db = settings.DATABASES['default']
    dbe = db['ENGINE']
    if dbe.endswith('.mysql'):
        mysql_create_database(db)
    elif dbe.endswith('.sqlite3'):
        pass
    else:
        assert(0)

def main_function_dispatch(name, args):
    try:
        f = main_function_map[name]
    except KeyError:
        sys.stderr.write('%s is not a valid command name\n' % (name,))
        sys.exit(2)
    f(args)

def program_name():
    return os.path.basename(sys.argv[0])

if __name__ == '__main__':
    main_function_dispatch(program_name(), sys.argv[1:])
